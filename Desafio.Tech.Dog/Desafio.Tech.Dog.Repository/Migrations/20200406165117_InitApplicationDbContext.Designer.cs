// <auto-generated />
using System;
using Desafio.Tech.Dog.Repository.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Desafio.Tech.Dog.Repository.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200406165117_InitApplicationDbContext")]
    partial class InitApplicationDbContext
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Desafio.Tech.Dog.Domain.Entities.Aluno", b =>
                {
                    b.Property<int>("IdAluno")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IdAluno")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataDeNascimento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("TurmaIdTurma")
                        .HasColumnType("int");

                    b.HasKey("IdAluno");

                    b.HasIndex("TurmaIdTurma");

                    b.ToTable("Aluno");
                });

            modelBuilder.Entity("Desafio.Tech.Dog.Domain.Entities.Endereco", b =>
                {
                    b.Property<int>("IdEndereco")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IdEndereco")
                        .HasColumnType("int");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Complemento")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("IdEscola")
                        .HasColumnType("int");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("IdEndereco");

                    b.HasIndex("IdEscola")
                        .IsUnique();

                    b.ToTable("Endereco");
                });

            modelBuilder.Entity("Desafio.Tech.Dog.Domain.Entities.Escola", b =>
                {
                    b.Property<int>("IdEscola")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IdEscola")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("IdEscola");

                    b.ToTable("Escola");
                });

            modelBuilder.Entity("Desafio.Tech.Dog.Domain.Entities.Turma", b =>
                {
                    b.Property<int>("IdTurma")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IdTurma")
                        .HasColumnType("int");

                    b.Property<int>("Capacidade")
                        .HasColumnType("int");

                    b.Property<int?>("EscolaIdEscola")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("IdTurma");

                    b.HasIndex("EscolaIdEscola");

                    b.ToTable("Turma");
                });

            modelBuilder.Entity("Desafio.Tech.Dog.Domain.Entities.Aluno", b =>
                {
                    b.HasOne("Desafio.Tech.Dog.Domain.Entities.Turma", "Turma")
                        .WithMany("Alunos")
                        .HasForeignKey("TurmaIdTurma");
                });

            modelBuilder.Entity("Desafio.Tech.Dog.Domain.Entities.Endereco", b =>
                {
                    b.HasOne("Desafio.Tech.Dog.Domain.Entities.Escola", "Escola")
                        .WithOne("Endereco")
                        .HasForeignKey("Desafio.Tech.Dog.Domain.Entities.Endereco", "IdEscola")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Desafio.Tech.Dog.Domain.Entities.Turma", b =>
                {
                    b.HasOne("Desafio.Tech.Dog.Domain.Entities.Escola", null)
                        .WithMany("Turmas")
                        .HasForeignKey("EscolaIdEscola");
                });
#pragma warning restore 612, 618
        }
    }
}
